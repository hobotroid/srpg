<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="640" 
					   height="480"
					   title="SRPG"
					   windowComplete="windowComplete();">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
	<![CDATA[
		import flash.display.Bitmap;
		import flash.display.NativeWindow;
		import flash.display.Stage3D;
		import flash.events.Event;
		
		import mx.events.AIREvent;
		import mx.core.Window;
		
		import com.lasko.Global;
		import com.lasko.ui.DebugWindow;
		import com.lasko.GameGraphics;
		import com.lasko.Fonts;
		import com.lasko.Game;
		import com.lasko.input.GameInput;

		[Embed(source = "../maps/plane2.tmx", mimeType = "application/octet-stream")]
		protected var mapPlaneClass:Class;
		[Embed(source = "../maps/mode7.tmx", mimeType = "application/octet-stream")]
		protected var mode7Class:Class;
		[Embed(source="../characters.xml",mimeType="application/octet-stream")]
		public static var charactersXMLClass:Class;
		[Embed(source="../items.xml",mimeType="application/octet-stream")]
		public static var itemsXMLClass:Class;

		private function windowComplete():void
		{
			XML.ignoreWhitespace = true;
			XML.prettyIndent = 0;
			
			Global.setMain(this);
			GameGraphics.init();
			com.lasko.input.GameInput.init(this.nativeApplication);
			Fonts.init();
			Global.addMapXML('plane', XML(new mapPlaneClass()));
			Global.addMapXML('mode7', XML(new mode7Class()));
			Global.setCharactersXML(XML(new charactersXMLClass()));
			Global.setItemsXML(XML(new itemsXMLClass()));
			
			var game:Game = new Game();
			this.stage.addChild(game);
			
			var nativeWindow:NativeWindow = stage.nativeWindow;
			var debugWindow:DebugWindow = new DebugWindow();
			debugWindow.width  = 300;
			debugWindow.open(false);
			debugWindow.move(nativeWindow.bounds.right, nativeWindow.bounds.top);
			debugWindow.height = nativeWindow.height;
			debugWindow.addEventListener(Event.CLOSE, function(e:Event):void {
				nativeWindow.close();
			});
			nativeWindow.addEventListener(Event.CLOSE, function(e:Event):void {
				debugWindow.close();
			});
			nativeWindow.alwaysInFront = true;
			Global.setDebugWindow(debugWindow);
		}
	]]>
	</fx:Script>
	
</s:WindowedApplication>